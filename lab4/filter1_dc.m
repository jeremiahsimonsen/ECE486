function Hd = filter1_dc
%FILTER1_DC Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 8.2 and the Signal Processing Toolbox 6.20.
% Generated on: 24-Mar-2015 00:27:54

% Elliptic Bandpass filter designed using FDESIGN.BANDPASS.

% All frequency values are in Hz.
Fs = 48000;  % Sampling Frequency

Fstop1 = 60;      % First Stopband Frequency
Fpass1 = 300;     % First Passband Frequency
Fpass2 = 3400;    % Second Passband Frequency
Fstop2 = 6200;    % Second Stopband Frequency
Astop1 = 80;      % First Stopband Attenuation (dB)
Apass  = 1;       % Passband Ripple (dB)
Astop2 = 80;      % Second Stopband Attenuation (dB)
match  = 'both';  % Band to match exactly

% Construct an FDESIGN object and call its ELLIP method.
h  = fdesign.bandpass(Fstop1, Fpass1, Fpass2, Fstop2, Astop1, Apass, ...
                      Astop2, Fs);
Hd = design(h, 'ellip', 'MatchExactly', match);

% Get the transfer function values.
[b, a] = tf(Hd);
g = prod(Hd.ScaleValues);

% Convert to a singleton filter.
Hd = dfilt.df2(b, a);
a = Hd.Denominator; b = Hd.Numerator;
f = 0:.001:.5;				% Frequency span
num = zeros(1,length(f));	% Numerator - to be evaluated at each f
den = zeros(1,length(f));	% Denominator - to be evaluated at each f
% Calculate denominator
for k=1:length(a)
	den = den + a(k)*exp(-1i*2*pi*(k-1).*f);
end
% Calculate numerator
for k=1:length(b)
	num = num + b(k)*exp(-1i*2*pi*(k-1).*f);
end
G1 = num ./ den;

% For reference, 2nd order looks like:
% G1 = (b(1) + b(2)*exp(-1i*2*pi*f) + b(3)*exp(-1i*2*pi*2*f))./ ...
% 	 (a(1) + a(2)*exp(-1i*2*pi*f) + a(3)*exp(-1i*2*pi*2*f));

% Adjust with a gain factor
K = 1/max(abs(G1));
G1 = K .* G1;
z = roots(b); p = roots(a);
zp2biquad(z,p,K,'filter1_coef.c');



% [EOF]
